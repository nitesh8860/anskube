---
- name: Get Systemd unit files from Kubernetes repository
  get_url:
    url=https://raw.githubusercontent.com/kubernetes/contrib/master/init/systemd/{{ item }}.service
    dest=/etc/systemd/system/{{ item }}.service
    force=yes
  register: "{{ item }}_service"
  notify:
    - reload systemd
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubelet
  environment:
    http_proxy: "{{ http_proxy|default('') }}"
    https_proxy: "{{ https_proxy|default('') }}"
    no_proxy: "{{ no_proxy|default('') }}"

- name: Get Systemd config files from Kubernetes repository
  get_url:
    url=https://raw.githubusercontent.com/kubernetes/contrib/master/init/systemd/environ/{{ item }}
    dest={{ kube_config_dir }}/{{ item }}
    force=yes
  register: "{{ item }}_default"
  notify:
    - reload systemd
  with_items:
    - apiserver
    - config
    - scheduler
    - controller-manager
    - kubelet
  environment:
    http_proxy: "{{ http_proxy|default('') }}"
    https_proxy: "{{ https_proxy|default('') }}"
    no_proxy: "{{ no_proxy|default('') }}"

- name: Get Systemd tmpfile from Kubernetes repository
  get_url:
    url=https://raw.githubusercontent.com/kubernetes/contrib/master/init/systemd/tmpfiles.d/kubernetes.conf
    dest=/usr/lib/tmpfiles.d/kubernetes.conf
    force=yes
  notify:
    - reload systemd
  environment:
    http_proxy: "{{ http_proxy|default('') }}"
    https_proxy: "{{ https_proxy|default('') }}"
    no_proxy: "{{ no_proxy|default('') }}"

- name: Create bin dir
  file: path={{ bin_dir }} state=directory

- name: Create directory for current Kubernetes release
  file: path={{ kube_current_release_directory }} state=directory

- name: Set a list of kube master binaries to download
  set_fact:
    kube_binaries: "{{ kube_master_binaries }}"

- name: Download Kubernetes binaries
  get_url:
    url: "{{ kube_download_url_base }}/{{ item }}"
    dest: "{{ kube_current_release_directory }}/{{ item }}"
    mode: 0755
    validate_certs: False
  environment:
    http_proxy: "{{ http_proxy|default('') }}"
    https_proxy: "{{ https_proxy|default('') }}"
    no_proxy: "{{ no_proxy|default('') }}"
  with_items:
    - "{{ kube_binaries | default([]) }}"

- name: Create symlinks
  file:
    src: "{{ kube_current_release_directory }}/{{ item }}"
    dest: "{{ bin_dir }}/{{ item }}"
    state: link
  with_items:
    - "{{ kube_binaries | default([]) }}"
    
 - name: Make sure etcd certificate vars are set
  fail:
    msg: "etcd certificates weren't slurped. Aborting ..."
  when: etcd_ca_cert is not defined or etcd_client_cert is not defined or etcd_client_key is not defined

- name: Make sure Kubernetes apiserver etcd certs dir exists
  file:
   state: directory
   path: "{{ kube_etcd_certs_dir }}"
   mode: "o-rwx"
   owner: kube
   group: "{{ kube_cert_group }}"

- name: Copy etcd certificates to master servers
  copy:
    content: "{{ item[1] }}"
    dest: "{{ item[0] }}"
    group: "{{ kube_cert_group }}"
    owner: kube
    mode: "0440"
  with_together:
    - [ "{{ apiserver_etcd_ca_file }}", "{{ apiserver_etcd_cert_file }}", "{{ apiserver_etcd_key_file }}" ]
    - [ "{{ etcd_ca_cert }}", "{{ etcd_client_cert }}", "{{ etcd_client_key }}" ]

- name: Write the config file for the api server
  template: src=apiserver.j2 dest={{ kube_config_dir }}/apiserver

- name: Ensure that a token auth file exists (addons may populate it)
  file: path={{ kube_token_dir }}/known_tokens.csv state=touch
  changed_when: false

- name: Setting the apiserver_modified fact to true
  set_fact:
    apiserver_modified: true
